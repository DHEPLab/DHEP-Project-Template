---
---


# Folder Structure for Emprical Projects
## DHEP Standard Template

### Option 1

```.
    ├── data
    │   ├── raw
    │   ├── interim
    │   ├── processed
    │   └── external
    ├── docs
    ├── notebooks
    ├── references
    ├── reports
    │   ├── figures
    │   └── tables
    ├── src
    │   ├── data
    │   ├── features
    │   ├── models  
    │   └── visualization
    └── tests
```

## DHEP Standard Template with `src` subfolders


### 
# Source: https://lachlandeer.github.io/snakemake-econ-r-tutorial

```{}
./
    |- src/
    |- out/
    |- log/
    |- sandbox/
    README.md
    Snakefile
```

Root Folder (`./`). This is the main folder of the project. Everything that is used or produced for the project should be located in a this folder, or better yet a sub-folder. Think of it as a ‘one-stop shop’ for what you are working on for this project. If it’s important - you must be able to find it here.

`src` folder. This is the `source’ folder. It contains all of your code files you develop during your analysis and the original datasets you begin your analysis with.

`out` folder. This is the output directory. We will put anything that we create by running a R script. For example, it can contain new datasets we create by cleaning and merging our original data, saved regression results and saved figures or summary tables. The main point is that anything we can recreate by running R scripts will get saved here - whether they be ‘temporary’ or ‘intermediate’ outputs that will get used by another R script later in our project, or ‘final’ outputs that we will want to insert into a paper, report or slide deck.

`log` folder. When we run and R script it produces output and messages, typically printing them to the screen. If we want to save those messages to a file, so we can refer to them in the future, we will save them here.

`sandbox` folder. As we work through our project, we will want to explore new ideas and test out how to code them. While we play with these bits and pieces of code, we save them in the sandbox. Separating them from src means we know that R scripts in here are ‘under development’. When they are finalized, we can move them into src.

`README.md` file. A README is a text file that introduces and explains the project. We should write information that explains what the project is about and how someone can run the scripts developed for the project in this file. We also recommend providing installation instructions to clarify exactly what needs to be installed to run the project.

`Snakefile`. We will use the Snakefile to write the steps needed that run all the scripts in the project. Further discussion of Snakefiles are deferred to the next chapter when introduce Snakemake.

```
./
    |src/
        |- data/
        |- data-management/
        |- data-specs/
        |- analysis/
        |- model-specs/
        |- lib/
        |- figures/
        |- tables/
        |- table-specs/
        |- paper/
        |- slides/
```

Here we see 9 sub-folders inside src. These are designed to logically separate various aspects of the project:

- data/ contains all of the project’s original/raw data.
- data-management/ contains all R scripts to clean and merge datasets together
- data-specs/ contains any special parameterizations used in cleaning or analysis.
- analysis/ contains all R scripts that are our main analysis. For example, our regression scripts
- model-specs/ conatins
- lib/ contains R scripts that contain functions that can be used more generally. For example helper functions that can be used in both data cleaning and analysis could be put here. So can scripts that contain functions that can be portable across multiple projects.
- figures/ contains R scripts that produce figures. One script per figure.
- tables/ contains R scripts that produce summary tables and regression tables. One script per table.
- table-specs - contains the
- paper contains the Rmarkdown files to write up project results in a paper, i.e. the paper’s text.
- slides contains the Rmarkdown files to write up project results as a slide deck, i.e. the text of the slides.

```
./
    |out/
        |- data/
        |- analysis/
        |- figures/
        |- tables/
        |- paper/
        |- slides/

```

out/data can store any datasets that are produced as a result of cleaning and merging
out/analysis can store any output from statistical analysis, for example saved regression results
out/figures holds all figures produced
out/tables holds all tables produced
out/paper has the pdf of the paper
out/slides has the pdf of the slides


### Stata Version
# Source: 

```
.
├── analysis/
    ├── data/
    ├── processed/
    ├── results/
        ├── figures/
        └── tables/
    ├── scripts/
        ├── 1_process_raw_data.do
        └── 2_...
    └── run.do
└── paper/
    ├── manuscript.tex
    ├── figures/
    └── tables/
```


### Python
## Source: https://aeturrell.github.io/coding-for-economists/wrkflow-rap.html#wrkflow-rap

```
.
|── README.md
|── requirements.txt
|── makefile
|── data/
|   └── raw_data.csv
|── src/
|   ├── utilities.py
|   ├── data_cleaning.py
|   ├── analysis.py
|   └── generate_plots_and_tables.py
|── results/
|   ├── cleaned_data.csv
|   └── derived_data.csv
|── outputs/
|   └── latex/
|       ├── paper.tex
|       └── slides.tex
|    ── floats/
|       ├── table.tex
|       └── time_series_plot.pdf
```
